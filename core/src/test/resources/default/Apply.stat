80 columns                                                                     |
<<< Massive 1
List(Split(Space, 0).withPolicy(SingleLineBlock(close)),
           Split(nl, 1).withPolicy({
             case Decision(t@FormatToken(_, `close`, _), s) =>
               Decision(t, List(Split(Newline, 0)))
           }).withIndent(2, close, Right))
>>>
List(Split(Space, 0).withPolicy(SingleLineBlock(close)),
     Split(nl, 1)
       .withPolicy({
         case Decision(t @ FormatToken(_, `close`, _), s) =>
           Decision(t, List(Split(Newline, 0)))
       })
       .withIndent(2, close, Right))
<<< Massive 2
 List(Split(Space,
            0,
            policy = SingleLineBlock(close),
            ignoreIf = blockSize > style.maxColumn),
      Split(nl,
            1,
            policy = {
            case Decision(t@FormatToken(_, `close`, _), s) =>
            Decision(t, List(Split(Newline, 0)))
            }))
>>>
List(Split(Space,
           0,
           policy = SingleLineBlock(close),
           ignoreIf = blockSize > style.maxColumn),
     Split(nl, 1, policy = {
       case Decision(t @ FormatToken(_, `close`, _), s) =>
         Decision(t, List(Split(Newline, 0)))
     }))
<<< Massive (good API) 3
Split(Space, 0).withPolicy {
    // Following case:
    // package foo // this is cool
    //
    // object a
    case Decision(t@FormatToken(`lastRef`, _: Comment, between), splits)
        if !between.exists(_.isInstanceOf[`\n`]) =>
      Decision(t, splits.map(_.withModification(Space)))
    case Decision(t@FormatToken(`lastRef`, _, _), splits) =>
      Decision(t, splits.map(_.withModification(Newline2x)))
}
>>>
Split(Space, 0).withPolicy {
  // Following case:
  // package foo // this is cool
  //
  // object a
  case Decision(t @ FormatToken(`lastRef`, _: Comment, between), splits)
      if !between.exists(_.isInstanceOf[`\n`]) =>
    Decision(t, splits.map(_.withModification(Space)))
  case Decision(t @ FormatToken(`lastRef`, _, _), splits) =>
    Decision(t, splits.map(_.withModification(Newline2x)))
}
<<< Massive (bad API) 3
Split(Space, 0, policy = {
    // Following case:
    // package foo // this is cool
    //
    // object a
    case Decision(t@FormatToken(`lastRef`, _: Comment, between), splits)
        if !between.exists(_.isInstanceOf[`\n`]) =>
      Decision(t, splits.map(_.withModification(Space)))
    case Decision(t@FormatToken(`lastRef`, _, _), splits) =>
      Decision(t, splits.map(_.withModification(Newline2x)))
})
>>>
Split(Space, 0, policy = {
  // Following case:
  // package foo // this is cool
  //
  // object a
  case Decision(t @ FormatToken(`lastRef`, _: Comment, between), splits)
      if !between.exists(_.isInstanceOf[`\n`]) =>
    Decision(t, splits.map(_.withModification(Space)))
  case Decision(t @ FormatToken(`lastRef`, _, _), splits) =>
    Decision(t, splits.map(_.withModification(Newline2x)))
})
<<< Looong
Seq(
  Split(modification, 0, policy = singleLine)
    .withIndent(indent, close, Left)
     .withOptimal(optimalTok),
  Split(Newline, 1 + nestedPenalty + lhsPenalty, policy = singleLine)
    .withIndent(indent, close, Left)
    .withOptimal(optimalTok),
  Split(modification, 2 + lhsPenalty, policy = oneArgOneLine, ignoreIf = singleArgument)
    .withIndent(StateColumn, close, Right)
    .withOptimal(optimalTok),
  Split(Newline,
    3 + nestedPenalty + lhsPenalty,
    policy = oneArgOneLine, ignoreIf = singleArgument)
    .withIndent(indent, close, Left)

)
>>>
Seq(
    Split(modification, 0, policy = singleLine)
      .withIndent(indent, close, Left)
      .withOptimal(optimalTok),
    Split(Newline, 1 + nestedPenalty + lhsPenalty, policy = singleLine)
      .withIndent(indent, close, Left)
      .withOptimal(optimalTok),
    Split(modification,
          2 + lhsPenalty,
          policy = oneArgOneLine,
          ignoreIf = singleArgument)
      .withIndent(StateColumn, close, Right)
      .withOptimal(optimalTok),
    Split(Newline,
          3 + nestedPenalty + lhsPenalty,
          policy = oneArgOneLine,
          ignoreIf = singleArgument).withIndent(indent, close, Left)
)
<<< continuation indent
Seq(
            // Either everything fits in one line or break on =>
            Split(Space, 0).withPolicy(SingleLineBlock(lastToken)),
            Split(Space, 1).withPolicy(Policy({
                  case Decision(t@FormatToken(`arrow`, _, _), s) =>
                    Decision(t, s.filter(_.modification.isNewline))
                },
                expire = lastToken.end))
              .withIndent(2, lastToken, Left) // case body indented by 2.
              .withIndent(2, arrow, Left) // cond body indented by 4.
        )
>>>
Seq(
    // Either everything fits in one line or break on =>
    Split(Space, 0).withPolicy(SingleLineBlock(lastToken)),
    Split(Space, 1)
      .withPolicy(Policy({
        case Decision(t @ FormatToken(`arrow`, _, _), s) =>
          Decision(t, s.filter(_.modification.isNewline))
      }, expire = lastToken.end))
      .withIndent(2, lastToken, Left) // case body indented by 2.
      .withIndent(2, arrow, Left) // cond body indented by 4.
)
<<< breaking on ( is cheaper than [
val ret =
  new mutable.MapBuilder[TokenHash, Tree, Map[TokenHash, Tree]](Map[TokenHash, Tree]())
>>>
val ret = new mutable.MapBuilder[TokenHash, Tree, Map[TokenHash, Tree]](
    Map[TokenHash, Tree]())
<<< . is cheaper
{{{{
        Seq(
            Split(
                  // This split needs to have an optimalAt field.
                  Space,
                  0,
                  ignoreIf = !spaceCouldBeOk,
                  optimalAt = Some(expire_______________a)).withPolicy(SingleLineBlockAAAA(
                expire))
        )

}}}}
>>>
{
  {
    {
      {
        Seq(
            Split(
                  // This split needs to have an optimalAt field.
                  Space,
                  0,
                  ignoreIf = !spaceCouldBeOk,
                  optimalAt = Some(expire_______________a))
              .withPolicy(SingleLineBlockAAAA(expire))
        )
      }
    }
  }
}
<<< penalize newlines inside apply 1
val ret =
       new mutable.MapBuilder[TokenHash, Token, Map[TokenHash, Token]](Map
             .empty[TokenHash, Token])
>>>
val ret = new mutable.MapBuilder[TokenHash, Token, Map[TokenHash, Token]](
    Map.empty[TokenHash, Token])
<<< penalize newlines inside apply 2
{{
val result = new scala.collection.mutable.SetBuilder[Token, Set[Token]](Set.empty[Token])
}}
>>>
{
  {
    val result = new scala.collection.mutable.SetBuilder[Token, Set[Token]](
        Set.empty[Token])
  }
}
<<< property scalding
  writeRead(
    // Use list because Array has a shitty toString
    { (b: List[Byte], os) => os.writePosVarInt(b.size); os.writeBytes(b.toArray) },
    { is =>
      val bytes = new Array[Byte](is.readPosVarInt)
      is.readFully(bytes)
      bytes.toList
    })
>>>
writeRead(
          // Use list because Array has a shitty toString
          { (b: List[Byte], os) =>
            os.writePosVarInt(b.size); os.writeBytes(b.toArray)
          }, { is =>
            val bytes = new Array[Byte](is.readPosVarInt)
            is.readFully(bytes)
            bytes.toList
          })
<<< spark configsWithAlternatives
{
val configsWithAlternatives = Map[String, Seq[AlternateConfig]](
    "spark.executor.userClassPathFirst" -> Seq(
      AlternateConfig("spark.files.userClassPathFirst", "1.3")),
    "spark.history.fs.cleaner.interval" -> Seq(
      AlternateConfig("spark.history.fs.cleaner.interval.seconds", "1.4")),
    "spark.history.fs.cleaner.maxAge" -> Seq(
      AlternateConfig("spark.history.fs.cleaner.maxAge.seconds", "1.4")),
    "spark.yarn.am.waitTime" -> Seq(
      AlternateConfig("spark.yarn.applicationMaster.waitTries", "1.3",
        // Translate old value to a duration, with 10s wait time per try.
        translation = s => s"${s.toLong * 10}s")),
    "spark.reducer.maxSizeInFlight" -> Seq(
      AlternateConfig("spark.reducer.maxMbInFlight", "1.4")),
    "spark.kryoserializer.buffer" -> Seq(AlternateConfig("spark.kryoserializer.buffer.mb", "1.4",
          translation = s => s"${(s.toDouble * 1000).toInt}k")),
    "spark.yarn.jars" -> Seq(
      AlternateConfig("spark.yarn.jar", "2.0"))
    )
    }
>>>
{
  val configsWithAlternatives = Map[String, Seq[AlternateConfig]](
      "spark.executor.userClassPathFirst" -> Seq(
          AlternateConfig("spark.files.userClassPathFirst", "1.3")),
      "spark.history.fs.cleaner.interval" -> Seq(
          AlternateConfig("spark.history.fs.cleaner.interval.seconds", "1.4")),
      "spark.history.fs.cleaner.maxAge" -> Seq(
          AlternateConfig("spark.history.fs.cleaner.maxAge.seconds", "1.4")),
      "spark.yarn.am.waitTime" -> Seq(
          AlternateConfig("spark.yarn.applicationMaster.waitTries",
                          "1.3",
                          // Translate old value to a duration, with 10s wait time per try.
                          translation = s => s"${s.toLong * 10}s")),
      "spark.reducer.maxSizeInFlight" -> Seq(
          AlternateConfig("spark.reducer.maxMbInFlight", "1.4")),
      "spark.kryoserializer.buffer" -> Seq(
          AlternateConfig("spark.kryoserializer.buffer.mb",
                          "1.4",
                          translation = s =>
                            s"${(s.toDouble * 1000).toInt}k")),
      "spark.yarn.jars" -> Seq(AlternateConfig("spark.yarn.jar", "2.0"))
  )
}
<<< spark comment explodes matrix
{
  test("add") {
    val blocks: Seq[((Int, Int), Matrix)] = Seq(
      ((0, 0), new DenseMatrix(2, 2, Array(1.0, 0.0, 0.0, 2.0))),
      ((0, 1), new DenseMatrix(2, 2, Array(0.0, 1.0, 0.0, 0.0))),
      ((1, 0), new DenseMatrix(2, 2, Array(3.0, 0.0, 1.0, 1.0))),
      ((1, 1), new DenseMatrix(2, 2, Array(1.0, 2.0, 0.0, 1.0))),
      ((2, 0), new DenseMatrix(1, 2, Array(1.0, 0.0))), // This comment will make scalafmt go crazy
      ((2, 1), new DenseMatrix(1, 2, Array(1.0, 5.0))))
      }
}
>>>
{
  test("add") {
    val blocks: Seq[((Int, Int), Matrix)] =
      Seq(((0, 0), new DenseMatrix(2, 2, Array(1.0, 0.0, 0.0, 2.0))),
          ((0, 1), new DenseMatrix(2, 2, Array(0.0, 1.0, 0.0, 0.0))),
          ((1, 0), new DenseMatrix(2, 2, Array(3.0, 0.0, 1.0, 1.0))),
          ((1, 1), new DenseMatrix(2, 2, Array(1.0, 2.0, 0.0, 1.0))),
          ((2, 0), new DenseMatrix(1, 2, Array(1.0, 0.0))), // This comment will make scalafmt go crazy
          ((2, 1), new DenseMatrix(1, 2, Array(1.0, 5.0))))
  }
}
<<< resolution copier
class ResolutionCopier(x: Int) {

  def visitClassDeclaration(node: ClassDeclaration): Boolean = {
    val toNode = this._toNode.asInstanceOf[ClassDeclaration];
    javaBooleanAnd(
        javaBooleanAnd(
            javaBooleanAnd(
                javaBooleanAnd(javaBooleanAnd(javaBooleanAnd(
                        javaBooleanAnd(javaBooleanAnd(
                            javaBooleanAnd(javaBooleanAnd(javaBooleanAnd(
                                    _isEqualNodes(node.documentationComment,
                                        toNode.documentationComment),
                                    _isEqualNodeLists(
                                        node.metadata, toNode.metadata)),
                                _isEqualTokens(node.abstractKeyword,
                                    toNode.abstractKeyword)), _isEqualTokens(
                                node.classKeyword, toNode.classKeyword)),
                            _isEqualNodes(
                                node.name, toNode.name)), _isEqualNodes(
                            node.typeParameters, toNode.typeParameters)),
                        _isEqualNodes(
                            node.extendsClause, toNode.extendsClause)),
                    _isEqualNodes(
                        node.withClause, toNode.withClause)), _isEqualNodes(
                    node.implementsClause, toNode.implementsClause)),
                _isEqualTokens(node.leftBracket, toNode.leftBracket)),
            _isEqualNodeLists(
                node.members,
                toNode.members)),
        _isEqualTokens(
            node.rightBracket,
            toNode.rightBracket));
  }
}
>>>
class ResolutionCopier(x: Int) {

  def visitClassDeclaration(node: ClassDeclaration): Boolean = {
    val toNode = this._toNode.asInstanceOf[ClassDeclaration];
    javaBooleanAnd(
        javaBooleanAnd(
            javaBooleanAnd(
                javaBooleanAnd(
                    javaBooleanAnd(
                        javaBooleanAnd(
                            javaBooleanAnd(
                                javaBooleanAnd(
                                    javaBooleanAnd(
                                        javaBooleanAnd(
                                            javaBooleanAnd(
                                                _isEqualNodes(
                                                    node.documentationComment,
                                                    toNode.documentationComment),
                                                _isEqualNodeLists(
                                                    node.metadata,
                                                    toNode.metadata)),
                                            _isEqualTokens(
                                                node.abstractKeyword,
                                                toNode.abstractKeyword)),
                                        _isEqualTokens(node.classKeyword,
                                                       toNode.classKeyword)),
                                    _isEqualNodes(node.name, toNode.name)),
                                _isEqualNodes(node.typeParameters,
                                              toNode.typeParameters)),
                            _isEqualNodes(node.extendsClause,
                                          toNode.extendsClause)),
                        _isEqualNodes(node.withClause, toNode.withClause)),
                    _isEqualNodes(node.implementsClause,
                                  toNode.implementsClause)),
                _isEqualTokens(node.leftBracket, toNode.leftBracket)),
            _isEqualNodeLists(node.members, toNode.members)),
        _isEqualTokens(node.rightBracket, toNode.rightBracket));
  }
}
<<< single arg breaking #160
   implicit class IterableW[+A](it: JSIterable[A]) {
     def iterator(): Iterator[A] =
      toIterator(it
            .asInstanceOf[IteratorMethodAccess]
            .bracketCall[JSIterator[A]](iteratorSymbol)())
   }
>>>
implicit class IterableW[+A](it: JSIterable[A]) {
  def iterator(): Iterator[A] =
    toIterator(
        it.asInstanceOf[IteratorMethodAccess]
          .bracketCall[JSIterator[A]](iteratorSymbol)())
}
<<< => {, #224
        foo.fold(
            err =>
              {
                logger.warn(s"Malformed request: $err\n${req.body}")
                BadRequest(jsonError(JsError toJson err)).fuccess
            },
            data => data)
>>>
foo.fold(err => {
  logger.warn(s"Malformed request: $err\n${req.body}")
  BadRequest(jsonError(JsError toJson err)).fuccess
}, data => data)
<<< SKIP indent cats
    XorT(F.flatMap(fea.value) {
      case Xor.Left(e) => f(e).value
      case r @ Xor.Right(_) => F.pure(r)
    })
>>>
+    XorT(
+      F.flatMap(fea.value) {
+    case Xor.Left(e) => f(e).value
+    case r @ Xor.Right(_) => F.pure(r)
+  })
<<< quirk in 0.2.4-RC1, #233
{{{{{
          compileInputs in (It, compile) <<= (compileInputs in (It, compile)) dependsOn
          }}}}}
>>>
{
  {
    {
      {
        {
          compileInputs in (It, compile) <<= (compileInputs in (It, compile)) dependsOn
        }
      }
    }
  }
}
<<< SKIP freqItems
{
def singlePassFreqItems( ): DataFrame = {

    val freqItems = df.select(cols.map(Column(_)) : _*).rdd.aggregate(countMaps)(
      seqOp = (counts, row) => {
        var i = 0
        while (i < numCols) {
          val key = row.get(i)
          thisMap.add(key, 1L)
          i += 1
        }
        counts
      },
      combOp = (baseCounts, counts) => {
        var i = 0
        while (i < numCols) {
          baseCounts(i).merge(counts(i))
          i += 1
        }
        baseCounts
      }
    )
}
}
>>>
x
<<< ONLY #310
object A {
  def x = {
     CreditCard(customerId = customerId,
               gatewayCustomerId = sCust.getId,
               gatewayCardId = card.getId,
               holderName = p.holderName,
               lastFour = p.lastFour,
               expMonth = p.expMonth,
               expYear = p.expYear,
               isDefault = p.isDefault,
               address1Check = card.getAddressLine1Check.some,
               zipCheck = card.getAddressZipCheck.some,
               regionId = a.regionId,
               addressName = a.name,
               address1 = a.address1,
               address2 = a.address2,
               city = a.city,
               zip = a.zip,
               brand = card.getBrand)
  }
}
>>>
